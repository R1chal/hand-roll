package com.richal.learn;

/**
 * 动态代理的目标接口
 * 
 * 这个接口定义了需要被代理的方法，动态代理系统会为这个接口生成实现类。
 * 在运行时，系统会：
 * 1. 动态生成一个实现此接口的类
 * 2. 根据不同的处理器(MyHandler)生成不同的方法实现
 * 3. 实现AOP、日志、性能监控等横切关注点
 * 
 * 设计模式：代理模式 + 策略模式
 * 应用场景：日志记录、性能监控、事务管理、权限控制等
 */
public interface MyInterface {

    /**
     * 方法1：用于演示动态代理的功能
     * 实际运行时，这个方法的具体实现由MyHandler决定
     */
    void method1();

    /**
     * 方法2：用于演示动态代理的功能
     * 实际运行时，这个方法的具体实现由MyHandler决定
     */
    void method2();

    /**
     * 方法3：用于演示动态代理的功能
     * 实际运行时，这个方法的具体实现由MyHandler决定
     */
    void method3();
}
